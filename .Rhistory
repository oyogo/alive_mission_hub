class = glue("card ms-depth-8 ms-sm{size} ms-xl{size}"),
style = style,
Stack(
tokens = list(childrenGap = 5),
Text(variant = "large", title, block = TRUE),
content
)
)
}
makePage <- function (title, subtitle, contents) {
tagList(div(
class = "page-title",
span(title, class = "ms-fontSize-32 ms-fontWeight-semibold", style =
"color: #323130"),
span(subtitle, class = "ms-fontSize-14 ms-fontWeight-regular", style =
"color: #605E5C; margin: 14px;")
),
contents)
}
card1 <- makeCard(
"Welcome to shiny.fluent demo!",
div(
Text("shiny.fluent is a package that allows you to build Shiny apps using Microsoft's Fluent UI."),
Text("Use the menu on the left to explore live demos of all available components.")
))
card2 <- makeCard(
"shiny.react makes it easy to use React libraries in Shiny apps.",
div(
Text("To make a React library convenient to use from Shiny, we need to write an R package that wraps it - for example, a shiny.fluent package for Microsoft's Fluent UI, or shiny.blueprint for Palantir's Blueprint.js."),
Text("Communication and other issues in integrating Shiny and React are solved and standardized in shiny.react package."),
Text("shiny.react strives to do as much as possible automatically, but there's no free lunch here, so in all cases except trivial ones you'll need to do some amount of manual work. The more work you put into a wrapper package, the less work your users will have to do while using it.")
))
home_page <- makePage(
"This is a Fluent UI app built in Shiny",
"shiny.react + Fluent UI = shiny.fluent",
div(card1, card2)
)
header <- tagList(
img(src = "appsilon-logo.png", class = "logo"),
div(Text(variant = "xLarge", "Sales Reps Analysis"), class = "title"),
CommandBar(
items = list(
CommandBarItem("New", "Add", subitems = list(
CommandBarItem("Email message", "Mail", key = "emailMessage", href = "mailto:me@example.com"),
CommandBarItem("Calendar event", "Calendar", key = "calendarEvent")
)),
CommandBarItem("Upload sales plan", "Upload"),
CommandBarItem("Share analysis", "Share"),
CommandBarItem("Download report", "Download")
),
farItems = list(
CommandBarItem("Grid view", "Tiles", iconOnly = TRUE),
CommandBarItem("Info", "Info", iconOnly = TRUE)
),
style = list(width = "100%")))
navigation <- Nav(
groups = list(
list(links = list(
list(name = 'Home', url = '#!/', key = 'home', icon = 'Home'),
list(name = 'Missions', url = '#!/other', key = 'missions', icon = 'AnalyticsReport'),
list(name = 'Projects', url = '#!/projects', key = 'projects', icon = 'GitGraph'),
list(name = 'Mission stories', url = '#!/mission_stories', key = 'shinyreact', icon = 'GitGraph'),
list(name = 'Map', url = '#!/map', key = 'map_site', icon = 'WebAppBuilderFragment')
))
),
initialSelectedKey = 'home',
styles = list(
root = list(
height = '100%',
boxSizing = 'border-box',
overflowY = 'auto'
)
)
)
footer <- Stack(
horizontal = TRUE,
horizontalAlign = 'space-between',
tokens = list(childrenGap = 20),
Text(variant = "medium", "Built with ❤ by Appsilon", block=TRUE),
Text(variant = "medium", nowrap = FALSE, "If you'd like to learn more, reach out to us at hello@appsilon.com"),
Text(variant = "medium", nowrap = FALSE, "All rights reserved.")
)
layout <- function(mainUI){
div(class = "grid-container",
div(class = "header", header),
div(class = "sidenav", navigation),
div(class = "main", mainUI),
div(class = "footer", footer)
)
}
analysis_page <- makePage(
"This is the analysis page",
h3("Other page")
)
analysis_page <- makePage(
"This is the analysis page",
h3("Other page")
)
analysis_page <- makePage(
"This is analysis page",
"shiny bla bla bla",
div(card1)
)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?DocumentCard
runApp()
runApp()
runApp()
runApp()
shiny.fluent::runExample()
shiny.fluent::runExample("DocumentCard.R")
shiny.fluent::runExample("DocumentCard.R")
shiny.fluent::runExample("Themes.R")
shiny.fluent::runExample("GroupedList.R")
runApp()
?Text
runApp()
runApp()
?Calendar.shinyInput
runApp()
runApp()
remotes::install_github("dreamRs/tuicalendr")
library(tuicalendr)
runApp()
runApp()
library(htmlwidgets)
runApp()
runApp()
runApp()
install.packages("calendR")
library(calendR)
runApp()
runApp()
runApp()
runApp()
runApp()
library(calendR)
runApp('caled')
runApp('caled')
shiny::runApp()
library(leaflet)
library(sf)
m.locations <- st_read("data/shp/makueni_county_bnd/County.shp") %>%
st_transform(crs = 4326)
m.locations <- st_read("data/shp/County.shp") %>%
st_transform(crs = 4326)
leaflet() %>%
addTiles() %>%
addPolygons(data = m.locations)
runApp()
runApp()
install.packages("fullcalendar")
library(fullcalendar)
devtools::install_github("rasmusab/fullcalendar")
library(fullcalendar)
shiny::runApp()
runApp()
?calendR
runApp()
colourpicker:::colourPickerAddin()
runApp()
install.packages("flipdownr")
runApp()
library(flipdownr)
runApp()
?flipdown
runApp()
library(flipdownr)
flipdown(downto = "2020-11-16", id = "c1", theme = "dark")
library(flipdownr)
flipdown(downto = "2020-11-16", id = "c1", theme = "dark")
library(flipdownr)
flipdown(downto = "2021-11-19", id = "c1", theme = "dark")
library(flipdownr)
flipdown(downto = "2021-11-19", id = "c1", theme = "dark")
runApp()
shiny::runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny.fluent::DocumentCard()
?shiny.fluent::DocumentCard()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
install.packages("shinyDash")
devtools::install_github("ShinyDash", "trestletech")
devtools::install_github("trestletech/shinyDash")
library(ShinyDash)
runApp()
runApp()
runApp()
?ScrollablePane()
runApp()
df <- data.frame(
attendance <- c(23,33,23,54,44,34,34,55,34,23,23,12,21,21,23,21,43,23,22,27,26,25,24,24,14,22)
)
leaflet() %>%
addProviderTiles(providers$Stamen.TonerLite, options = providerTileOptions(noWrap = TRUE)) %>%
addMarkers(lng = 35.10244,
lat = 2.05696, label = "Kamila")
leaflet() %>%
addProviderTiles(providers$Stamen.TonerLite, options = providerTileOptions(noWrap = TRUE)) %>%
addMarkers(lng = 35.10244,
lat = 2.05696, label = "Kamila",
labelOptions = labelOptions(noHide = T, direction = "bottom"))
leaflet() %>%
addProviderTiles(providers$Stamen.TonerLite, options = providerTileOptions(noWrap = TRUE)) %>%
addMarkers(lng = 35.10244,
lat = 2.05696, label = "Kamila",
labelOptions = labelOptions(noHide = T, direction = "bottom")) %>%
addMiniMap()
leaflet() %>%
setView(0,0,3) %>%
addProviderTiles(providers$Stamen.TonerLite, options = providerTileOptions(noWrap = TRUE)) %>%
addMarkers(lng = 35.10244,
lat = 2.05696, label = "Kamila",
labelOptions = labelOptions(noHide = T, direction = "bottom")) %>%
addMiniMap()
leaflet() %>%
setView(0,0,5) %>%
addProviderTiles(providers$Stamen.TonerLite, options = providerTileOptions(noWrap = TRUE)) %>%
addMarkers(lng = 35.10244,
lat = 2.05696, label = "Kamila",
labelOptions = labelOptions(noHide = T, direction = "bottom")) %>%
addMiniMap()
leaflet() %>%
setView(1,3,5) %>%
addProviderTiles(providers$Stamen.TonerLite, options = providerTileOptions(noWrap = TRUE)) %>%
addMarkers(lng = 35.10244,
lat = 2.05696, label = "Kamila",
labelOptions = labelOptions(noHide = T, direction = "bottom")) %>%
addMiniMap()
leaflet() %>%
setView(1,5,5) %>%
addProviderTiles(providers$Stamen.TonerLite, options = providerTileOptions(noWrap = TRUE)) %>%
addMarkers(lng = 35.10244,
lat = 2.05696, label = "Kamila",
labelOptions = labelOptions(noHide = T, direction = "bottom")) %>%
addMiniMap()
leaflet() %>%
setView(1,5,9) %>%
addProviderTiles(providers$Stamen.TonerLite, options = providerTileOptions(noWrap = TRUE)) %>%
addMarkers(lng = 35.10244,
lat = 2.05696, label = "Kamila",
labelOptions = labelOptions(noHide = T, direction = "bottom")) %>%
addMiniMap()
leaflet() %>%
setView(1,5,4) %>%
addProviderTiles(providers$Stamen.TonerLite, options = providerTileOptions(noWrap = TRUE)) %>%
addMarkers(lng = 35.10244,
lat = 2.05696, label = "Kamila",
labelOptions = labelOptions(noHide = T, direction = "bottom")) %>%
addMiniMap()
leaflet() %>%
setView(zoom = 5) %>%
addProviderTiles(providers$Stamen.TonerLite, options = providerTileOptions(noWrap = TRUE)) %>%
addMarkers(lng = 35.10244,
lat = 2.05696, label = "Kamila",
labelOptions = labelOptions(noHide = T, direction = "bottom")) %>%
addMiniMap()
leaflet() %>%
setView(zoom = 5) %>%
addProviderTiles(providers$Esri.WorldStreetMap, options = providerTileOptions(noWrap = TRUE)) %>%
addMarkers(lng = 35.10244,
lat = 2.05696, label = "Kamila",
labelOptions = labelOptions(noHide = T, direction = "bottom")) %>%
addMiniMap()
leaflet() %>%
#setView(zoom = 5) %>%
addProviderTiles(providers$Esri.WorldStreetMap, options = providerTileOptions(noWrap = TRUE)) %>%
addMarkers(lng = 35.10244,
lat = 2.05696, label = "Kamila",
labelOptions = labelOptions(noHide = T, direction = "bottom")) %>%
addMiniMap()
leaflet() %>%
#setView(zoom = 5) %>%
addProviderTiles(providers$OpenStreetMap.CH, options = providerTileOptions(noWrap = TRUE)) %>%
addMarkers(lng = 35.10244,
lat = 2.05696, label = "Kamila",
labelOptions = labelOptions(noHide = T, direction = "bottom")) %>%
addMiniMap()
leaflet() %>%
setView(lat = 2.05696,lng = 35.10244,zoom = 5) %>%
addProviderTiles(providers$OpenStreetMap.CH, options = providerTileOptions(noWrap = TRUE)) %>%
addMarkers(lng = 35.10244,
lat = 2.05696, label = "Kamila",
labelOptions = labelOptions(noHide = T, direction = "bottom")) %>%
addMiniMap()
leaflet() %>%
setView(lat = 2.05696,lng = 35.10244,zoom = 2) %>%
addProviderTiles(providers$OpenStreetMap.CH, options = providerTileOptions(noWrap = TRUE)) %>%
addMarkers(lng = 35.10244,
lat = 2.05696, label = "Kamila",
labelOptions = labelOptions(noHide = T, direction = "bottom")) %>%
addMiniMap()
leaflet() %>%
setView(lat = 2.05696,lng = 35.10244,zoom = 7) %>%
addProviderTiles(providers$OpenStreetMap.CH, options = providerTileOptions(noWrap = TRUE)) %>%
addMarkers(lng = 35.10244,
lat = 2.05696, label = "Kamila",
labelOptions = labelOptions(noHide = T, direction = "bottom")) %>%
addMiniMap()
leaflet() %>%
setView(lat = 2.05696,lng = 35.10244,zoom = 10) %>%
addProviderTiles(providers$OpenStreetMap.CH, options = providerTileOptions(noWrap = TRUE)) %>%
addMarkers(lng = 35.10244,
lat = 2.05696, label = "Kamila",
labelOptions = labelOptions(noHide = T, direction = "bottom")) %>%
addMiniMap()
leaflet() %>%
setView(lat = 2.05696,lng = 35.10244,zoom = 10) %>%
addProviderTiles(providers$OpenStreetMap.CH, options = providerTileOptions(noWrap = TRUE)) %>%
addMarkers(lng = 35.10244,
lat = 2.05696, label = "Kamila",
labelOptions = labelOptions(noHide = T, direction = "bottom")) %>%
addMiniMap()
leaflet() %>%
setView(lat = 2.05696,lng = 35.10244,zoom = 10) %>%
addProviderTiles(providers$Esri.NatGeoWorldMap, options = providerTileOptions(noWrap = TRUE)) %>%
addMarkers(lng = 35.10244,
lat = 2.05696, label = "Kamila",
labelOptions = labelOptions(noHide = T, direction = "bottom")) %>%
addMiniMap()
runApp()
runApp()
runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
colourpicker:::colourPickerAddin()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?Text
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
mission_sites <- read.csv("data/mission_sites.csv")
View(mission_sites)
names(mission_sites)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
rsconnect::showLogs()
install.packages("Rcpp")
shiny::runApp()
runApp()
install.packages("calendR")
runApp()
install.packages("magick")
install.packages("magick")
install.packages("calendR")
runApp()
install.packages("ShinyDash")
remotes::install_github("trestletech/ShinyDash")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
shiny::runApp()
